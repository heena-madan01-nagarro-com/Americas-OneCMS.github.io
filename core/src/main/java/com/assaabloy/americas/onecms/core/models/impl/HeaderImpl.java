/* * *********************************************************************** * ASSA ABLOY Americas CONFIDENTIAL * ___________________ * * Copyright 2021 ASSA ABLOY Americas. * All Rights Reserved. * * NOTICE:  All information contained herein is, and remains the property * of ASSA ABLOY Americas and its suppliers, if any. The intellectual and * technical concepts contained herein are proprietary to ASSA ABLOY Americas * and its suppliers and are protected by trade secret or copyright law. * Dissemination of this information or reproduction of this material * is strictly forbidden unless prior written permission is obtained * from ASSA ABLOY Americas. * *********************************************************************** */package com.assaabloy.americas.onecms.core.models.impl;import java.util.Collections;import java.util.List;import com.adobe.acs.commons.models.injectors.annotation.ChildResourceFromRequest;import com.adobe.cq.export.json.ComponentExporter;import com.adobe.cq.export.json.ExporterConstants;import com.assaabloy.americas.onecms.core.models.ActionIcons;import com.assaabloy.americas.onecms.core.models.BrandData;import com.assaabloy.americas.onecms.core.models.Header;import com.assaabloy.americas.onecms.core.models.NavItems;import com.fasterxml.jackson.annotation.JsonIgnore;import com.fasterxml.jackson.annotation.JsonProperty;import com.fasterxml.jackson.core.JsonProcessingException;import com.fasterxml.jackson.databind.ObjectMapper;import com.fasterxml.jackson.databind.annotation.JsonSerialize;import javax.annotation.PostConstruct;import org.apache.sling.api.SlingHttpServletRequest;import org.apache.sling.api.resource.Resource;import org.apache.sling.models.annotations.Exporter;import org.apache.sling.models.annotations.Model;import org.apache.sling.models.annotations.injectorspecific.InjectionStrategy;import org.apache.sling.models.annotations.injectorspecific.SlingObject;import org.apache.sling.models.annotations.injectorspecific.ValueMapValue;import org.slf4j.Logger;import org.slf4j.LoggerFactory;@Model(adaptables = {    SlingHttpServletRequest.class}, adapters = {    Header.class,    ComponentExporter.class}, resourceType = "onecms/components/content/header")@Exporter(name = ExporterConstants.SLING_MODEL_EXPORTER_NAME, extensions = ExporterConstants.SLING_MODEL_EXTENSION)public class HeaderImpl        implements Header {    @ChildResourceFromRequest(injectionStrategy = InjectionStrategy.OPTIONAL)    @JsonIgnore    private List<NavItems> navItems;    @ValueMapValue(injectionStrategy = InjectionStrategy.OPTIONAL)    private String brandLogo;    @ValueMapValue(injectionStrategy = InjectionStrategy.OPTIONAL)    private String brandLogoAltText;    @ValueMapValue(injectionStrategy = InjectionStrategy.OPTIONAL)    private String brandDivision;    @ChildResourceFromRequest(injectionStrategy = InjectionStrategy.OPTIONAL)    private List<ActionIcons> actions;    @SlingObject    private Resource resource;    private NavigationData navigationData;    private BrandData brandData;    private String jsonData;    private static final String HEADER_JSON_ROOT_NODE = "{\"header\":";    private static final String CLOSING_CURLY_BRACE = "}";    private final Logger LOGGER = LoggerFactory.getLogger(FooterImpl.class);    @PostConstruct    protected void init() {        LOGGER.debug("Starting init method of Header");        ObjectMapper objectMapper = new ObjectMapper();        try {            navigationData = new NavigationData();            navigationData.setNavItems(navItems);            brandData = new BrandData();            brandData.setActions(actions);            brandData.setBrandDivision(brandDivision);            brandData.setBrandLogo(brandLogo);            brandData.setBrandLogoAltText(brandLogoAltText);//            jsonData = HEADER_JSON_ROOT_NODE + objectMapper.writeValueAsString(this) + CLOSING_CURLY_BRACE;            jsonData = objectMapper.writeValueAsString(this);        } catch (JsonProcessingException ex) {            LOGGER.error("Error in parsing JSON Data for Header component {}", ex.getMessage());        }        LOGGER.debug("Exiting init method of Header");    }    @Override    @JsonIgnore    public List<NavItems> getNavItems() {        return navItems != null ? Collections.unmodifiableList(navItems) : null;    }    @Override    @JsonIgnore    public String getBrandLogo() {        return brandLogo;    }    @Override    @JsonIgnore    public String getBrandLogoAltText() {        return brandLogoAltText;    }    @Override    @JsonIgnore    public String getBrandDivision() {        return brandDivision;    }    @Override    @JsonIgnore    public List<ActionIcons> getActions() {        return actions != null ? Collections.unmodifiableList(actions) : null;    }    @Override    @JsonIgnore    public String getExportedType() {        return resource.getResourceType();    }    @JsonIgnore    @Override    public String getJsonData() {        return jsonData;    }    @Override    @JsonProperty(value = "navData")    public NavigationData getNavigationData() {        return navigationData;    }    @Override    public BrandData getbrandData() {        return brandData;    }}